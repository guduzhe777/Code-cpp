//亲密程度  w  与  距离感成反比 s  w = 1/s;
//距离感是单向的。  小蓝对小红患了单相思
//从小蓝的眼中看去，他和小红之间的距离为 1，只差一层窗户纸；
//她和小蓝之间的距离为 108000
//距离感在认识的人之间是可传递的。
//例如小绿觉得自己跟小蓝之间的距离为 2，则即使小绿并不直接认识小红，我们也默认小绿早晚会认识小红，
//小绿会觉得自己跟小红之间的距离为 1+2=3

//或者他通过其他人也能认识小红，但通过不同渠道推导出来的距离感不一样，该怎么算呢？
//小绿对小红的距离感定义为所有推导出来的距离感的最小值。
//女人缘：一个人的异性缘不是由最喜欢他/她的那个异性决定的，而是由对他/她最无感的那个异性决定的。
//我们记一个人 i 在一个异性 j 眼中的距离感为 D ij ：：i  j 二维数组 保存二者距离感
//将 i 的“异性缘”定义为 1/max j∈S(i)? {D ij? } 异性缘最大 max j∈S(i)? {D ij? } 最小
//给定的一批人与人之间的距离感中分别找出两个性别中的“大众情人”。
// N（≤500），为总人数。
//
 //性别 K 朋友1:距离1 朋友2:距离2 …… 朋友K:距离K
//输入 N 共N行  i行 对应 编号i   和 i 有关系的人 距离  给二维数组
//如何赋值：
//小绿对小红的距离感定义为所有推导出来的距离感的最小值。
//min(st[i,j],dis) 
//寻找男性 女性  性别 标记： si[i] i 1为男  0为女
//在男 女 中寻找最大距离//他/她最无感的那个异性决定的
//对于 每个i来说 凡是同性距离感无限小  寻找 距离感最大的人 
// //性别 K 朋友1:距离1 朋友2:距离2 …… 朋友K:距离K::getline();

//处理字符串
//得到二维数组关系
//对同性 赋值 最小 
//在二维数组中 寻找最大的 保存(pair保存可以 i,max0) 然后 与其他比较最小的
//
#include<bits/stdc++.h>

using namespace std;
const int N = 510;
int st[N][N];
int n;
bool si[N];//标记数组  s[i]为1  i为男 
int main()
{
    cin>>n;
    for(int i = 1;i<=n;i++)//编号i  第i行 
    {
        string s;
        getline(cin,s);
						//未曾全读入  全读入 不容易 处理成整型
						// 一个一个输入 
						
        if(s[0] == 'M') si[i] = 1; //编号i 为男/女 
        	else{
        		si[j] = 0;
			}
		int cnt = s[2] - '0';//与几个人的数量关系
			 
        for(int j = 0;j<cnt;j++)
        {
        	
		}
    }
    
    return 0;
}

