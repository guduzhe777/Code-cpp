

// x | y = x 不会使 x 没0的地方变成1  即 不会使 0 变成 x的路上 在不该出现 1 的地方变成1
//不会使 0->x路上 出现不该出现的1

//如何看呢 ？ 举个例子 即 什么是出现不该出现的1 x某一位为0  y这一位为1 
// ->>  就是判断 x为0 y始终不为1即也为0  则y可以使用
//x & y = y 保证了 x为0部分 y也为0还是y  x为1 部分 是y  x为0部分 y还是0 那么 等于y 若 x为0部分 y不为0 那么不是y 
//不满足条件：x & y != y则不符合  
//防止x不该为1部分为1  或的1具有永远性 x为0部分 y中一定为 0 x为1 部分 y随便  
//x & y = y ： 0占改变位 1为不变位  x为0部分 结果一定为0 1部分 结果看y 要求 x为0 y也为0 
//所以要求  x为0 y也为0  x为1 看y 结果即y
//所以x & y = y则满足条件

//与中：与中看0  0可以改变1状态 1为不改变该位状态    或中：或中看1  1可以改变0状态 0不改变该位状态

//同为 0 0 是 保证与(改变位)时 x不会改变y  同为 1  1是保证（改变位）或时 y不会改变 x

//确保x中为0部分 y中也为0 （与中x不改变y）  / y中为1部分 x中也为1 
//发现不能实现0.0 换一种说法 x为0部分 y不能为1 0 在 “与” 中可以改变 “1” 状态 1不改变该位状态   
//若x位0 该位y为1 那么 x & y 会改变该位状态 y为0则不会改变该位状态 x为1部分 不会改变y
//满足要求的：x为0 y为0 为1 为y 所以x & y 不会改变y状态 x & y = y
//
//x & y = y 
//x | y = x 

//或：有1不会消失 检测不该出现1的地方 出现1
//x & y != y  
//与：有0不会消失 检测不该出现0的地方出现0
#include<bits/stdc++.h>

using namespace std;



int t;
int n,x;
const int N = 1e5+10;
int a[N];
void sovle()
{
    cin>>n>>x;
    long long ans = 0;
    for(int k = 1;k<=3;k++)
    {
        for(int i = 0;i<n;i++) 
            cin>>a[i];
        
        for(int i = 0;i<n;i++)
        {
            if((x|a[i]) != x ) break;
            ans |= a[i];
        }
    }
    cout<<(ans == x?"YES":"NO")<<"\n";
    

}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin>>t;
    while(t--)
        sovle();


    return 0;
}